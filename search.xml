<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git使用的步骤与流程]]></title>
    <url>%2F2018%2F02%2F18%2Fgit%E4%BD%BF%E7%94%A8%E7%9A%84%E6%AD%A5%E9%AA%A4%E4%B8%8E%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[git的使用，包括add、commit、打标签、创建以及合并分支、push到远程仓库 git常用命令init → 修改文件 → add → commit git的三种状态：modified修改文件 → add到暂存区 → commit造一颗后悔药 git config -l : 查看配置 git --version : 查看版本号 在文件夹右键选择Git Bash Here，如何运行git init: 创建仓库 git init file2 :创建一个文件夹file2并同时创建仓库 git clone xxxxxxx : 将github上的xxxxx clone到本地，文件夹名为此项目的repository名字 git clone xxxxxx test3 ：将xxxxx clone into 文件夹test3内，文件夹名就是test3 git status -sb : 查看文件状态。红色??表示该文件还没add过。绿色A表示add过但没commit了 git add . : 将所有修改添加至暂存区。然后运行git status -sb查看此时的状态。绿色A表示add过但没commit了 git commit -m &quot;描述&quot; ：造一颗后悔药 组合技 git add . &amp;&amp; git commit -m &quot;描述&quot; ：将add和commit组合使用 git log : 查看后悔药的id（commit后面的代码），按↑ ↓键查看，按 Q 退出 12345commit f0d95058cd32a332b98967f6c0a701c64a00810a Author: xxxxxx &lt;xxxxxxxx@gmail.com&gt; Date: Thu Sep 28 22:30:43 2017 +0800 完成第一章 git log -p : 查看具体增删了哪些内容 git log --oneline : 在一行简要显示历史节点 git log --all --oneline ： 可以看到master和所有分支上的历史记录 git log --all --graph : 图示全部分支历史记录 git checkout 后悔药的id ：吃一颗后悔药~~ git checkout - : 回退到上一个历史节点 打tag git tag -a 标签名 -m &quot;描述&quot; ：打tag(如果项目比较大，有上百个commit时，给几个重要的后悔药打上tag方便查找，省去了拷贝后悔药id代码) git log --oneline: git tag -a 标签名 -m &quot;描述&quot; 后悔药的id ：给某个历史节点打标签 git tag : 列出所有tag git show 标签名 ：git show v1 查看v1的具体详情（记得↑ ↓翻页） git checkout 标签名 ：吃一颗后悔药~ 比如git checkout v1(省去了拷贝后悔药id代码) 分支branch假设在开发V3版时，发些V2版存在一些bug，那么可以在V2版上创建分支用来修复V2的bug，然后与后期的版本合并 git branch 分支名 ：在master主干上创建分支 git checkout 分支名 ：进入分支 组合技 git checkout -b 分支名 ：创建并进入这个分支 在3 not rich commit造完后悔药后，创建一个rich的分支并进入git branch rich &amp;&amp; git checkout rich 此时就是在rich分支上操作了，修改not rich为rich，然后add → commit git checkout master : 回到master分支 git log --all --oneline ： 可以看到master和所有分支上的历史记录 git log --all --graph : 图示全部分支历史记录 git merge 分支名 ：合并分支,合并完之后再次add和commit 上传到远程仓库github视频教程 ： (点我)[https://www.bilibili.com/video/av17603446/?from=search&amp;seid=12748296924973751566#page=9] git remote add origin git@github.com:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/git-demo-1.git ：将本地仓库上传至远程仓库 git pull : 把远程仓库中最新的更改拖下来，然后在此基础上编辑文件，完成后add和commit git push -u origin master ：上传到远程仓库 clear 或者 Ctrl + L :清屏]]></content>
      <categories>
        <category>命令行</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>npm</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git命令以及偷懒小技巧]]></title>
    <url>%2F2018%2F02%2F17%2Fgit%E5%91%BD%E4%BB%A4%E4%BB%A5%E5%8F%8A%E5%81%B7%E6%87%92%E5%B0%8F%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[本文简单介绍了git与github的配置，以及如何将本地仓库与github连接起来。还介绍了git常用的一些命令，以及如何简化git命令 参考资料: 饥人谷 配置 GitHub (SSH Key) 进入 https://github.com/settings/keys 如果页面里已经有一些 key，就点「delete」按钮把这些 key 全删掉。如果没有，就往下看 点击 New SSH key，你需要输入 Title 和 Key，但是你现在没有 key，往下看 打开 Git Bash 按照 https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/ 的教程 运行 ssh-keygen -t rsa -b 4096 -C &quot;你的邮箱&quot;，注意填写你的邮箱！ 按回车三次 运行 ll ~/.ssh,可以看到生成了id_rsa(钥匙)和id_rsa.pub(锁) 运行 cat ~/.ssh/id_rsa.pub，得到一串东西，完整的复制这串东西 回到上面第 3 步的页面，在 Title 输入「win7上的ssh」 在 Key 里粘贴刚刚你你复制的那串东西 点击 Add SSH key 回到 Git Bash 运行 ssh -T git@github.com，用你电脑上的钥匙打开上传到github的锁，你可能会看到这样的提示：输入 yes 回车 然后如果你看到 Permission denied (publickey). 就说明你失败了，请回到第 1 步重来，是的，回到第 1 步重来；如果你看到 Hi FrankFang! You’ve successfully authenticated, but GitHub does not provide shell access. 就说明你成功了！ 一台电脑只需要一个 SSH key 一个 SSH key 可以访问你的所有仓库，即使你有 1000000 个仓库，都没问题 如果你新买了电脑，就在新电脑上重新生成一个 SSH key，把这个 key 也上传到 GitHub，它可以和之前的 key 共存在 GitHub 上 如果你把 key 从电脑上删除了，重新生成一个 key 即可，替换之前的 key Git的配置与使用配置Gitgit --version :查看当前git版本号 12345git config --global user.name 你的英文名git config --global user.email 你的邮箱git config --global push.default matchinggit config --global core.quotepath falsegit config --global core.editor &quot;vim&quot; 五句话，依次运行。不执行的话，电脑可能会爆炸你信不信。 git config -l : 查看配置 只在本地使用Git步骤 创建目录作为我们的项目目录：mkdir git-demo-1 进入目录 cd git-demo-1 git init，初始化这句命令会在 git-demo-1 里创建一个 .git 目录 ls -la 你就会看到 .git 目录，它就是一个「仓库」，不要进去看，这仓库里面有毒，别进去！ 在 git-demo-1 目录里面添加任意文件，假设我们添加了两个文件，分别是 index.html 和 css/style.css 123touch index.htmlmkdir csstouch css/style.css 运行 git status -sb查看文件状态， 可以看到文件前面有 ?? 号 123## Initial commit on master?? css/?? index.html 这个 ?? 表示 git 一脸懵逼，不知道你要怎么对待这些变动。 使用 git add 将文件添加到「暂存区」你可以一个一个地 add12git add index.htmlgit add css/style.css 你也可以一次性 addgit add . 意思是把当前目录（.表示当前目录）里面的变动都加到「暂存区」 再次运行 git status -sb，可以看到 ?? 变成了 A123## Initial commit on masterA css/style.cssA index.html A 的意思就是添加，也就是说你告诉 git，这些文件我要加到仓库里 使用 git commit -m &quot;信息&quot;将你 add 过的内容「正式提交」到本地仓库（.git就是本地仓库），并添加一些注释信息，方便日后查阅你可以一个一个地 commit12git commit index.html -m &apos;添加index.html&apos;git commit css/style.css -m &quot;添加 css/style.css&quot; 你也可以一次性 commitgit commit . -m &quot;添加了几个文件&quot; 再再次运行 git status -sb，发现没有文件变动了，这是因为文件的变动已经记录在仓库里了。 这时你使用 git log 就可以看到历史上文件的变动：12345commit f0d95058cd32a332b98967f6c0a701c64a00810aAuthor: xxxxxx &lt;xxxxxxxx@gmail.com&gt;Date: Thu Sep 28 22:30:43 2017 +0800 添加几个文件 按↑ ↓键查看，按 Q 退出 运行history可以看到历史上输入过的命令 运行start css/style.css 会使用默认的编辑器编辑style.css，保存 运行git status -sb,可以看到style.css前面一个红色的M(Modified)，代表文件有过变动但未add到仓库 12## masterM css/style.css 运行git add style.css,可以看到红色的M变成了绿色的M，表示变动过的文件将添加到「暂存区」 运行git commit -m &quot;改动style.css&quot;这个改动就被提交到 .git 本地仓库了 再再次运行 git status -sb，会发现没有变更了，这说明所有变动都被本地仓库记录在案了。 删除文件rm style.css 运行git add style.css，将删除结果add到仓库 git status -sb，会发现前面有个绿色的D(Delete) 运行git commit -m &quot;删除style.css&quot; 总结 git init，初始化本地仓库 .git git status -sb，显示当前所有文件的状态 git add 文件路径，用来将变动加到暂存区 git commit -m &quot;信息&quot;，用来正式提交变动，提交至 .git 仓库 如果有新的变动，我们只需要依次执行 git add xxx 和 git commit -m &#39;xxx&#39; 两个命令即可。别看本教程废话那么多，其实就这一句有用！先 add 再 commit，行了，你学会 git 了。 git log 查看变更历史 将本地仓库上传到 GitHub如何将我们这个 git-demo-1 上传到 GitHub 呢？ 步骤 在 GitHub 上New一个repository，名称随意，一般跟本地目录名一致按照截图所示，除了仓库名，其他的什么都别改，其他的什么都别改，其他的什么都别改，其他的什么都别改，这样你才能创建一个空仓库 点击创建按钮之后，GitHub 就会把后续的操作全告诉你，如图 看图，点击 SSH 按钮，点击 SSH 按钮，点击 SSH 按钮，我想你现在肯定不会忘了点击 SSH 按钮了吧~~~~如果不点击这个按钮，你就会使用默认的 HTTPS 地址。但是千万不要使用 HTTPS 地址，因为 HTTPS 地址使用起来特别麻烦，每次都要输入密码，而 SSH 不用输入用户名密码。为什么 SSH 不用密码呢，因为你已经上传了 SSH public key。还记得吗？如果不记得，翻到本文第一部分「配置 GitHub」章节。 由于我们上之前创建过本地仓库了，所以看图，图中下面半部分就是你需要的命令，我们一行一行拷贝过来执行 4.1 找到图中的「…or push an existing repository from the command line」这一行，你会看到 git remote add origin https://github.com/xxxxxxxxxx/git-demo-1.git， 如果你发现这个地址是 https 开头的，那你就做错了，还记得吗，我们要使用 SSH 地址，GitHub 的 SSH 地址是以 git@github.com 开头的。 4.2 再次点击 SSH 按钮，不管我强调多少遍，总会有人忘记点击 SSH 按钮，为什么呢？我也不知道，为了防止你忘了点击 SSH 按钮，我最后再说一遍，「点击 SSH按钮」，点击之后，整个世界就会变得美好起来。 4.3 得到新的命令 git remote add origin git@github.com:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/git-demo-1.git，复制并运行它 4.4 复制第二行 git push -u origin master，运行它 4.5 刷新当前页面，你的仓库就上传到 GitHub 了！是不是特别简单？只要你按照我说的做，一丝不苟，即可。 直接在 GitHub 创建一个仓库，然后下载到本地步骤 在GitHub 上新建一个仓库 git-demo-2，这次就不创建空仓库了，而是自带 README 和 Lisence 的仓库，创建截图如下：请按图中所示，填写一模一样的内容，然后点击创建按钮。 这样一来，这个仓库就会自动拥有三个文件： 这三个文件的作用请自行了解：.gitignore 的作用、README.md 的作用 以及 LISENCE 的作用 运行git clone 以git@github.com开头的地址运行完了你就会发现，桌面上多出一个 git-demo-2 目录。 cd git-demo-2 进入这个多出来的目录 运行 ls -la 你会看到，远程目录的所有文件都在这里出现了，另外你还看到了 .git 本地仓库。这时你就可以添加文件，git add，然后 git commit 了。 总结 git clone git@github.com:xxxx，下载仓库 git init，初始化本地仓库 .git git status -sb，显示当前所有文件的状态 git add 文件路径，用来将变动加到暂存区 git commit -m “信息”，用来正式提交变动，提交至 .git 仓库 如果有新的变动，我们只需要依次执行 git add xxx 和 git commit -m ‘xxx’ 两个命令即可。别看本教程废话那么多，其实就这一句有用！先 add 再 commit，行了，你学会 git 了。 git log 查看变更历史 如何上传更新你在本地目录有任何变动，只需按照以下顺序就能上传到github：1234git add 文件路径git commit -m &quot;信息&quot;git pull （相信我，你一定会忘记这一个命令）获取远程仓库最新文件git push 下面是例子1234567cd git-demo-1touch index2.htmlgit add index2.htmlgit commit -m &quot;新建 index2.html&quot;git pull退出vim: esc + : + q + !git push 然后你去 git-demo-1 的 GitHub 页面，就能看到 index2.html 出现在里面了。是不是很……简……单……呢…… 其他Git命令 git remote add origin git@github.com:xxxxxxx.git 将本地仓库与远程仓库关联 git remote set-url origin git@github.com:xxxxx.git 上一步手抖了，可以用这个命令来挽回 git branch 新建分支 git merge 合并分支 git stash 通灵术 git stash pop 反转通灵术 git revert 后悔了 git reset 另一种后悔了 git diff 查看详细变化 git操作偷懒技巧通过~/.bashrc 文件可以简化git操作 自动运行 首先 touch ~/.bashrc 创建一下这个文件 start ~/.bashrc 选用编辑器编辑这个文件，内容为 echo &#39;Hi&#39; 你也可以用命令行编辑文件 echo &quot;echo &#39;hi&#39;&quot; &gt;&gt; ~/.bashrc 关闭退出 Git Bash，然后打开 Git Bash，是不是看到了 Hi，这说明每次进入 Git Bash，就会优先运行 ~/.bashrc 里面的命令 重新编辑 ~/.bashrc，内容改为 cd ~/Desktop，重启 Git Bash，有没有发现默认就进入桌面目录了？ 你可以用 ~/.bashrc 在进入 Git Bash 前执行任何命令，十分方便。 alias(简写) 在 ~/.bashrc 里新增一行 alias f=&quot;echo &#39;frank is awesome&#39;&quot;，等于号两边不能有空格，你最好一个字都不要错。 运行 source ~/.bashrc，作用是执行 ~/.bashrc 运行 f，就会看到 frank is awesome 也就是说，现在 f 就是 echo ‘frank is awesome’ 的缩写了，利用这个技巧，我们可以把很多常见的命令缩写一下，比如1234567alias la=&apos;ls -a&apos;alias ll=&apos;ls -l&apos;alias gst=&apos;git status -sb&apos;alias ga=&apos;git add&apos;alias ga.=&apos;git add .&apos;alias gc=&apos;git commit&apos;alias gc.=&apos;git commit .&apos; 保存退出，然后运行 source ~/.bashrc 这样一来，你的 Git 操作就会简单很多：12345ga 1.txtga .gc 1.txtgc.gst 环境变量还可以在 ~/.bashrc 里面设置一些环境变量，比如你可以在 ~/.bashrc 里面添加一行 export SASS_BINARY_SITE=&quot;https://npm.taobao.org/mirrors/node-sass&quot;那么以后你安装 node-sass 的时候就不会因为被墙而报错了。以后会用到的，现在先说一下。 设置 PATHexport PATH=&quot;目录的绝对路径:$PATH&quot;可以在 PATH 里添加一个目录，不要运行，等用到的时候再来查。]]></content>
      <categories>
        <category>命令行</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>npm</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[命令行基础及常用命令]]></title>
    <url>%2F2018%2F02%2F16%2F%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[介绍了命令行的一些基础知识，以及常用的一些命令 参考资料: 饥人谷 基本概述~ / . .. $ 的意思 ~/desktop : 其中的 ~ 表示电脑的username，所以这句命令等同于stage/desktop . : 当前目录 .. : 上级目录，cd ..表示进入上级目录常见单词英文翻译directory目录、文件夹file文件make新建remove删除move移动copy复制list罗列link链接find查找echo发出回音、重复touch触摸change改变 单词缩写命令全写缩写创建目录make directorymkdir删除removerm移动 / 重命名movemv复制copycp罗列listls改变目录change directorycd 缩写规则就是：删掉元音字幕（A E I O U），保留前 2 到 3 个辅音字母 基础命令 cd ~/Desktop 进入桌面 mkdir demo-1 创建目录，这时你可以切到桌面，看到 demo-1 目录 rm -rf demo-1 删除目录【-r表示递归，循环删除直至删光，-f表示强制，不提示yes/no】 touch 1.txt 创建文件 mv 1.txt 2.txt 这样我们就把 1.txt 移到 2.txt 了，也就是重命名 Linux常用命令(重点！！！)操作命令进入目录cd显示当前目录的详细路径pwd创建目录mkdir 目录名创建特殊名字的目录(比如带空格的文件名)mkdir “目 录名” : mkdir &quot;file 1&quot;创建多个目录mkdir 目录名1 目录名2 :mkdir file1 file2 file3创建深层次目录mkdir -p 目录路径：举个栗子 mkdir -p file1/file2/file3我是谁,显示用户名whoami清屏clear 或者 Ctrl + L––显示文件夹里的内容ls 文件夹路径 : ls显示当前文件夹里的内容，查看指定路径文件夹里的内容ls file1/file2查看文件夹里的所有内容，包括隐藏的ls -a 文件夹路径显示文件夹详细信息ls -l 文件夹路径 ： drwxr表示directory(d开头表示目录，-开头表示非目录)、read可读、write可写、x可运行显示详细信息，包括隐藏的文件ls -la 文件夹路径––创建文件echo ‘1’ &gt; 文件路径 ：echo &#39;xxx&#39; &gt; 1.txt追加文件内容echo ‘1’ &gt;&gt; 文件路径创建文件touch 文件名改变文件更新时间touch 文件名––复制文件cp 源路径 目标路径 : cp 1.txt 2.txt将1.txt里的内容复制到2.txt复制目录cp -r 源路径 目标路径 ： cp -r file1 file2––重命名文件名mv 原文件名 修改后的文件名 : mv 1.txt 2.txt––删除文件rm 文件路径 : rm 1.txt强制删除文件rm -f 文件路径删除目录rm -r 目录路径强制删除目录rm -rf 目录路径––【windows不支持】查看当前目录结构tree【windows不支持】建立软链接，相当于创建一个双胞胎目录ln -s 真实文件 双胞胎文件 ：ln -s demo demo-copy––下载文件curl -L https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js &gt; jq.js【将jq源码下载下来并保存到jq.js】拷贝网页wget -p -H -e robots=off https://www.baidu.com磁盘占用df -kh当前目录大小du -sh .各文件大小du -h]]></content>
      <categories>
        <category>命令行</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>npm</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[命令行的安装和配置方法]]></title>
    <url>%2F2018%2F02%2F15%2F%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[归纳总结了下 git、git bash、node、npm 的安装和配置方法. 参考资料: 饥人谷 本文参考 饥人谷 的文章后整理归纳了一下，主要包括git、git bash、node、npm的使用和配置方法。 Git Bash的使用第一种使用方式找一个目录，在目录上右键点击，然后选中「Git Bash Here」，即可用 Git Bash 打开这个目录。试试输入 touch 1.txt，回车后可以看到目录里多了一个touch 1.txt文件。 第二种使用方式直接打开 Git Bash，输入 cd ~/Desktop 即可来到桌面所在的目录。试试输入 touch 1.txt，回车后看看桌面上是不是多了一个文件。 Linux常用命令新建文件夹：mkdir my-dir 删除文件夹：rm -rf my-dir 创建文件：echo &quot;hello&quot; &gt; newFile.txt 创建空内容文件: touch file.txt 重命名: mv 1.txt 2.txt ,将1.txt重命名为2.txt 删除文件：rm newFile.txt 进入文件夹: cd my-dir 运行文件: start file.txt 显示文件夹内所有的文件: ls 清屏: clear 中断/退出模式: ctrl + C 关闭git bash: ctrl + D 或者输入 exit 进入node模式: node 进入npm模式: npm Node.js的使用使用第一种使用方法 进入 Git Bash 输入 node，回车，就可以进入 node 运行环境，这个时候我们就可以写 JS 了 试试写最简单的 JS 语句，比如 1+2，回车 2 * 8，回车 node的另一种使用方法我们可以先创建一个 JS 文件，然后让 node 运行 来到桌面：cd ~/Desktop 新建一个目录用来玩耍：mkdir hello-node 进入这个目录：cd hello-node 新建一个有内容的 JS 文件：echo &quot;console.log(&#39;Hi, Node.js&#39;)&quot; &gt; main.js，那么 main.js 就新建成功了 输入 node main.js，回车，node 就会执行这个 main.js 文件，你会看到「Hi, Node.js」字样 玩完了，删除 hello-node：cd .. ; rm -rf hello-node npm的配置和使用配置打开 Git Bash，依次输入以下命令，按回车：123npm config set registry https://registry.npm.taobao.org/npm config set loglevel httpnpm config set progress false npm 的配置被存储在 ~/.npmrc，你可以随时改。 #npm的使用我们可以用 npm 的翻译工具做一个随时可用的小字典，这个小工具的名字叫做 fanyi。 打开Git Bash，运行 npm i -g fanyi 即可安装 fanyi，安装完成之后，输入 fanyi frontend 就可以看到对应的中文释义了！ 是不是很帅呢？！ Git的配置和使用配置请在命令行运行这五句话！！！一定要运行这五句话，不然 git 就不能用了12345git config --global user.name xxx #方便产品经理找（怼）你git config --global user.email yyy #方便产品经理找（怼）你git config --global push.default simple # 本来我写的是 matching，不过想了想可能 simple 更好git config --global core.quotepath false #防止文件名变成数字git config --global core.editor &quot;vim&quot; # 使用vim编辑提交信息 git config -l : 查看配置信息 这样就可以愉快地使用git了~ ##Git的使用使用 在本地新建一个文件夹 test ，在文件夹上右键点击，然后选中「Git Bash Here」 在github上新建一个仓库New repository 在已经打开的Git Bash内输入123456echo &quot;# test&quot; &gt;&gt; README.mdgit initgit add README.mdgit commit -m &quot;first commit&quot;git remote add origin https://github.com/harry0071/test.gitgit push -u origin master 最后一段代码 git push -u origin master 回车后会询问 yes/no ,输入yes此时如果报错的话，需要SSH Key解决办法： 进入github的 Settings &gt;&gt;&gt; 点击右侧的 SSH and GPG keys &gt;&gt;&gt; 点击New SSH key &gt;&gt;&gt; 进入 https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/ 按照网页提示在Git Bash内输入:ssh-keygen -t rsa -b 4096 -C &quot;改成自己的邮箱@example.com&quot; ，接着按3次回车，直至出现冒泡泡的画面 将生成的SSH key cat下来: cat ~/.ssh/id_rsa.pub 回到第1步将生成的SSH key粘贴进去 重新运行`git push -u origin master 常用命令git init: 把用Git Bash打开的本地文件夹变成Git可以管理的仓库git add 1.txt 2.txt: 将文件提交至暂存区,可以一次添加多个文件git add .: 将文件夹内的所有文件添加到暂存区git commit -m &quot;本次更新内容&quot;: 把add的文件一次性打包提交至本地版本库，-m后面输入的是本次更新的说明注释git push origin master: 将本地仓库推送到Github仓库git rm 1.txt: 删除一个文件git checkout -- 1.txt: 把误删的文件恢复到最新版本git rm 1.txt + git commit -m &quot;remove&quot;: 彻底删除文件]]></content>
      <categories>
        <category>命令行</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>npm</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sublime中如何使用terminal教程]]></title>
    <url>%2F2018%2F02%2F08%2Fsublime%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8terminal%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[1.安装terminal首先在sublime text3 中安装terminalctrl+shift+P打开package control面板,输入pci进入安装插件列表，输入terminal找到插件安装 2.配置terminalterminal默认调用系统自带的PowerShell，接下来我们改成cmd.exe 安装完成后在工具菜单选择“Preferences(首选项)”–“Package Settings”–“Terminal”–“Settings - User” 在里面输入打开cmd命令窗口的脚本，然后ctr+s保存。12345&#123; &quot;terminal&quot;: &quot;c:\\WINDOWS\\system32\\cmd.exe&quot;, &quot;parameters&quot;: [&quot;/START&quot;,&quot;%CWD%&quot;] &#125; 3.启动terminal现在我们打开sublime，使用ctrl+shift+t就可以打开cmd命令窗口了 4.更多关于terminal详情关于sublime的terminal插件的更多安装及配置方法:百度经验Github]]></content>
      <categories>
        <category>sublime</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[漂亮的弹窗插件 —— SweetAlert教程]]></title>
    <url>%2F2018%2F02%2F08%2Fsweetalert%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[SweetAlert可以替代JavaScript原生的alert和confirm等函数呈现的弹出提示框，它将提示框进行了美化，并且允许自定义，支持设置提示框标题、提示类型、内容展示图片、确认取消按钮文本、点击后回调函数等。官方网站: https://sweetalert.js.org/Github: https://github.com/t4t5/sweetalert中文教程站: http://mishengqiang.com/sweetalert/ 使用方法1.引入(我用的CDN引入)12&lt;link href="https://cdn.bootcss.com/sweetalert/1.1.3/sweetalert.min.css" rel="stylesheet"&gt;&lt;script src="https://cdn.bootcss.com/sweetalert/1.1.3/sweetalert.min.js"&gt;&lt;/script&gt; 2.使用简称函数swal调用sweetAlert123456789101112swal(&#123; title: "确定删除吗？", text: "你将无法恢复该虚拟文件！", type: "warning", showCancelButton: true, confirmButtonColor: "#DD6B55", confirmButtonText: "确定删除！", closeOnConfirm: false&#125;,function()&#123; swal("删除！", "你的虚拟文件已经被删除。", "success"); &#125;); 3.举个栗子 html代码 1234567891011121314151617181.基本信息：&lt;button id="demo1"&gt;试一试&lt;/button&gt; &lt;br /&gt;2.带有文字的标题：&lt;button id="demo2"&gt;试一试&lt;/button&gt; &lt;br /&gt;3.成功提示：&lt;button id="demo3"&gt;试一试&lt;/button&gt; &lt;br /&gt;4.带有“确认”按钮的功能的警告消息：&lt;button id="demo4"&gt;试一试&lt;/button&gt; &lt;br /&gt;5.通过传递参数，您可以执行一些其他的事情比如“取消”。：&lt;button id="demo5"&gt;试一试&lt;/button&gt; &lt;br /&gt;6.一个有自定义图标的消息：&lt;button id="demo6"&gt;试一试&lt;/button&gt; &lt;br /&gt;7.自定义HTML信息：&lt;button id="demo7"&gt;试一试&lt;/button&gt; &lt;br /&gt;2秒后关闭：&lt;button id="demo8"&gt;试一试&lt;/button&gt; &lt;br /&gt;8.更换“提示”功能: &lt;button id="demo9"&gt;试一试&lt;/button&gt; &lt;br /&gt;9.使用加载程序（例如，用于AJAX请求）: &lt;button id="demo10"&gt;试一试&lt;/button&gt; &lt;br /&gt; js代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107document.getElementById("demo1").onclick = function() &#123; swal("这是一个信息提示框!")&#125;;document.getElementById("demo2").onclick = function() &#123; swal("这是一个信息提示框!", "很漂亮，不是吗？")&#125;;document.getElementById("demo3").onclick = function() &#123; swal("干得好", "你点击了按钮!", "success")&#125;;document.getElementById("demo4").onclick = function() &#123; swal(&#123; title: "你确定？", text: "您将无法恢复这个虚构的文件！", type: "warning", showCancelButton: true, confirmButtonColor: "#DD6B55", confirmButtonText: "是的，删除！", closeOnConfirm: false &#125;, function() &#123; swal("删除!", "您的虚构文件已被删除！", "success") &#125;)&#125;;document.getElementById("demo5").onclick = function() &#123; swal(&#123; title: "你确定？", text: "您将无法恢复这个虚构的文件！", type: "warning", showCancelButton: true, confirmButtonColor: "#DD6B55", confirmButtonText: "是的，删除！", cancelButtonText: "不，取消", closeOnConfirm: false, closeOnCancel: false &#125;, function(isConfirm) &#123; if (isConfirm) &#123; swal("删除!", "您的虚构文件已被删除！", "success") &#125; else&#123; swal("取消!", "您的虚构文件是安全的！", "error") &#125; &#125;)&#125;;document.getElementById("demo6").onclick = function() &#123; swal(&#123; title: "Sweet!", text: "这里是自定义图像!", imageUrl: "img/thumbs-up.jpg" &#125;)&#125;;document.getElementById("demo7").onclick = function() &#123; swal(&#123; title: "HTML &lt;small&gt;标题&lt;/small&gt;!", text: "A custom &lt;span style='color:pink'&gt;html&lt;span&gt; message.", html: true &#125;)&#125;;document.getElementById("demo8").onclick = function() &#123; swal(&#123; title: "自动关闭警报!", text: "2秒后自动关闭", timer: 2000, showConfirmButton: false &#125;)&#125;;document.getElementById("demo9").onclick = function() &#123; swal(&#123; title: "请输入！", text: "填写一些信息", type: "input", showCancelButton: true, closeOnConfirm: false, animation: "slide-from-top", inputPlaceholder: "请输入..." &#125;, function(inputValue) &#123; if (inputValue === false) &#123; return false; &#125; if (inputValue === "") &#123; swal.showInputError("内容不能为空！"); return false; &#125; swal("Nice!", "你输入的是：" + inputValue, "success") &#125;)&#125;;document.getElementById("demo10").onclick = function() &#123; swal(&#123; title: "AJAX请求实例", text: "提交运行Ajax请求", type: "info", showCancelButton: true, closeOnConfirm: false, showLoaderOnConfirm: true &#125;, function() &#123; setTimeout(function() &#123; swal("AJAX请求完成！"); &#125;, 2000) &#125;)&#125;; 效果预览 更多详情可以去中文教程站查看更多详情,里面包括了各种配置和方法，以及示例中文教程站: http://mishengqiang.com/sweetalert/]]></content>
      <categories>
        <category>jq</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>js</tag>
        <tag>插件</tag>
        <tag>jq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo的next主题个性化教程:打造炫酷网站]]></title>
    <url>%2F2018%2F02%2F08%2Fhexonext%2F</url>
    <content type="text"><![CDATA[看到有些next主题的网站很炫酷，那么是怎么配置的呢？接下来我会讲一讲如何实现一些炫酷的效果 主要有以下32种： 在右上角或者左上角实现fork me on github添加RSS添加动态背景实现点击出现桃心效果修改文章内链接文本样式修改文章底部的那个带#号的标签在每篇文章末尾统一添加“本文结束”标记修改作者头像并旋转博文压缩修改代码块自定义样式侧边栏社交小图标设置主页文章添加阴影效果在网站底部加上访问量添加热度网站底部字数统计添加 README.md 文件设置网站的图标Favicon实现统计功能添加顶部加载条在文章底部增加版权信息添加网易云跟帖(跟帖关闭，已失效，改为来必力)隐藏网页底部powered By Hexo / 强力驱动修改网页底部的桃心文章加密访问添加jiathis分享博文置顶修改字体大小修改打赏字体不闪动自定义鼠标样式为博客加上萌萌的宠物DaoVoice 在线联系点击爆炸效果 详细配置请参考: https://www.jianshu.com/p/f054333ac9e6]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[日期时间控件jQuery datetimepicker的使用简介]]></title>
    <url>%2F2018%2F02%2F08%2Fjquerydatetimepicker%2F</url>
    <content type="text"><![CDATA[datetimepicker是一个配置灵活的日期选择插件，你可以定义它的展示方式，包括日期格式、语言、限制选择日期范围、添加相关按钮以及其它导航等 此项目的Github地址：https://github.com/xdan/datetimepicker演示地址: https://xdsoft.net/jqplugins/datetimepicker/ 使用方法1.添加引用添加jquery.js、datetimepicker.js和datetimepicker.css到您的页面123&lt;link href="https://cdn.bootcss.com/jquery-datetimepicker/2.5.17/jquery.datetimepicker.min.css" rel="stylesheet"&gt;&lt;script src="https://cdn.bootcss.com/jquery/2.2.4/jquery.min.js"&gt;&lt;/script&gt;&lt;script src="https://cdn.bootcss.com/jquery-datetimepicker/2.5.17/jquery.datetimepicker.full.min.js"&gt;&lt;/script&gt; 2.创建input元素1&lt;input id="datetimepicker" type="text" &gt; 3.设置成中文1$.datetimepicker.setLocale('zh'); 4.启用插件1$('#datetimepicker').datetimepicker(); 按以上步骤我们就实现jquery datetimepicker的使用，当然这只是最基本的样式，另外jquery datetimepicker的样式控制是通过传一个json对象的参数给datetimepicker来实现的。下面我们举个例子来看下：1$("#start").datetimepicker(&#123; format: 'Y/m/d', timepicker: false &#125;); 上面传入的参数设置只显示年月日，以及弹出层只能选择日期，而不能选择时间。 那我们接下来总结一下它常用的一些参数及其作用。 详细配置参数关于详细配置参数参考：https://xdsoft.net/jqplugins/datetimepicker/12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455$('#datetimepicker').datetimepicker(&#123; value: '' // 设置当前datetimepicker的值 rtl: false, // false 默认显示方式 true timepicker和datepicker位置变换 format: 'Y/m/d H:i', // 设置时间年月日时分的格式 如: 2016/11/15 18:00 formatTime: 'H:i', // 设置时间时分的格式 formatDate: 'Y/m/d', // 设置时间年月日的格式 startDate: false, // new Date(), '1986/12/08', '-1970/01/05','-1970/01/05', step: 10, // 设置时间时分的间隔 closeOnDateSelect: false, // true 设置datepicker可点击 false 设置datepicker不可点击 实际上可以双击 closeOnTimeSelect: true, // true 设置timepicker可点击 false 设置timepicker不可点击 closeOnWithoutClick: true, // true 设置点击input可以隐藏datetimepicker false 设置点击input不可以隐藏datetimepicker closeOnInputClick: true, // true 设置点击input可以隐藏datetimepicker false 设置点击input不可以隐藏datetimepicker (会有闪动 先隐藏 再显示) timepicker: true, // true 显示timepicker false 隐藏timepicker datepicker: true, // true 显示datepicker false 隐藏datepicker weeks: false, // true 显示周数 false 隐藏周数 defaultTime: false, // 如果输入值为空 可用来设置默认显示时间 use formatTime format (ex. '10:00' for formatTime: 'H:i') defaultDate: false, // 如果输入值为空 可用来设置默认显示日期 use formatDate format (ex new Date() or '1986/12/08' or '-1970/01/05' or '-1970/01/05') minDate: false, // 设置datepicker最小的限制日期 如：2016/08/15 maxDate: false, // 设置datepicker最大的限制日期 如：2016/11/15 minTime: false, // 设置timepicker最小的限制时间 如：08:00 maxTime: false, // 设置timepicker最大的限制时间 如：18:00 allowTimes: [], // 设置timepicker显示的时间 如：allowTimes:['09:00','11:00','12:00','21:00'] opened: false, // false默认打开datetimepicker可关闭 true打开datetimepicker后不可关闭 initTime: true, // 设置timepicker默认时间 如：08:00 inline: false, // ture设置datetimepicker一直显示 theme: '', // ture设置datetimepicker显示样式 如: 'dark' withoutCopyright: true, // ture默认隐藏左下角'xdsoft.net'链接 false 显示左下角'xdsoft.net'链接 inverseButton: false, // false 默认 true datepicker的上一月和下一月功能互换 timepicker的上下可点击按钮功能互换 hours12: false, // true设置12小时格式 false设置24小时格式 next: 'xdsoft_next', // 设置datepicker上一月按钮的样式 prev : 'xdsoft_prev', // 设置datepicker下一月按钮的样式 dayOfWeekStart: 0, // 设置默认第-列为周几 如：0 周日 1 周一 parentID: 'body', // 设置父级选择器 timeHeightInTimePicker: 25, // 设置timepicker的行高 timepickerScrollbar: true, // ture设置timepicker显示滑动条 false设置timepicker不显示滑动条 todayButton: true, // ture显示今天按钮 false不显示今天按钮 位置在datepicker左上角 prevButton: true, // ture显示上一月按钮 false不显示上一月按钮 位置在datepicker左上角 nextButton: true, // ture显示下一月按钮 false不显示下一月按钮 位置在datepicker又上角 scrollMonth: true, // ture 设置datepicker的月份可以滑动 false设置datepicker的月份不可以滑动 lazyInit: false, // 翻译： 初始化插件发生只有当用户交互。大大加速插件与大量的领域的工作 mask: false, // 使用输入掩码。真正的-自动生成一个字段的“格式”的面具，从0到9的数字，设置为值的最高可能的数字。例如：第一个小时的数字不能大于2，而第一位数字不能大于5 如：&#123;mask:'9999/19/39 29:59',format:'Y/m/d H:i'&#125; validateOnBlur: true, // 失去焦点时验证datetime值输入,。如果值是无效的datetime,然后插入当前日期时间值 yearStart: 1950, // 设置最小的年份 yearEnd: 2050, // 设置最大的年份 monthStart: 0, // 设置最小的月份 monthEnd: 11, // 设置最大的月份 roundTime: 'round', // 设置timepicker的计算方式 round四舍五入 ceil向上取整 floor向下取整 allowDateRe : null, // 设置正则表达式检查日期 如：&#123;format:'Y-m-d',allowDateRe:'\d&#123;4&#125;-(03-31|06-30|09-30|12-31)' &#125; disabledDates : [], // 设置不可点击的日期 如：disabledDates: ['21.11.2016','22.11.2016','23.11.2016','24.11.2016','25.11.2016','26.11.2016'] disabledWeekDays: [], // 设置不可点击的星期 如：disabledWeekDays:[0,3,4] yearOffset: 0, // 设置偏移年份 如：2 代表当前年份加2 -2 代表当前年份减2 beforeShowDay: null, // 显示datetimepicker之前可调用的方法 &#123;beforeShowDay:function(d) &#123;console.log("bsd"); &#125; &#125; enterLikeTab: true, // tab按键均可使datetimepicker关闭 true点击回车键可使datetimepicker关闭 false点击回车键不可使datetimepicker关闭 showApplyButton: false // 相当于确定按钮 true显示 false隐藏&#125;); jquery datetimepicker的相关点击方法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081/* * 监听时间插件显示时的事件 */$('#datetimepicker').datetimepicker(&#123; onShow: function(dateText, inst) &#123; console.log("---已打开datetimepicker----"); &#125;&#125;); /* * 监听时间插件关闭时的事件 */$('#datetimepicker').datetimepicker(&#123; onClose: function(dateText, inst) &#123; console.log("---已关闭datetimepicker----"); &#125;&#125;); /* * 监听点击日期时的事件 */ $('#datetimepicker').datetimepicker(&#123; onSelectDate: function(dateText, inst) &#123; console.log(dateText); &#125;&#125;); /* * 监听点击时分的事件 */ $('#datetimepicker').datetimepicker(&#123; onSelectTime: function(dateText, inst) &#123; console.log(dateText); &#125;&#125;); /* * 监听点击datepicker 上一月下一月按钮及选择月份点击事件 */$('#datetimepicker').datetimepicker(&#123; onChangeMonth: function(dateText, inst) &#123; console.log(dateText); &#125;&#125;);/* * 监听获取当前datetimepicker显示的所有日期信息 */$('#datetimepicker').datetimepicker(&#123; onGetWeekOfYear: function(dateText, inst) &#123; console.log(dateText); &#125;&#125;); /* * 监听选择年份的点击事件 */$('#datetimepicker').datetimepicker(&#123; onChangeYear: function(dateText, inst) &#123; console.log(dateText); &#125;&#125;); /* * 实时监听你选择的日期和时间 */$('#datetimepicker').datetimepicker(&#123; onChangeDateTime: function(dateText, inst) &#123; console.log(dateText); &#125;&#125;); /* * 实时监听datetimepicker上的所有事件 */$('#datetimepicker').datetimepicker(&#123; onGenerate: function(dateText, inst) &#123; console.log(dateText); &#125;&#125;);]]></content>
      <categories>
        <category>jq</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>js</tag>
        <tag>插件</tag>
        <tag>jq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[store.js的使用 -- 本地存储localStorage的封装插件]]></title>
    <url>%2F2018%2F02%2F08%2Fstore%2F</url>
    <content type="text"><![CDATA[本地存储localstoragelocalstorage 是 HTML5 提供的在客户端存储数据的新方法，主要作用是将数据保存在客户端中，并且数据是永久保存的，除非人为干预删除。localstorage 的局限1、只有版本较高的浏览器中才支持 localstorage2、localStorage的值的类型限定为string类型，使用 JSON 时需转换3、如果存储内容过多会消耗内存空间，导致页面变卡，因为localStorage本质上是对字符串的读取 store.jsGithub地址 store.js 是一个兼容所有浏览器的 LocalStorage 包装器，不需要借助 Cookie 或者 Flash来实现。它提供非常了简洁的 API 来实现跨浏览器的本地存储功能。使用store,js简化了使用localStorage原生方法的操作。 store.js的使用 首先引入store.min.js插件: 1&lt;script src="https://cdn.bootcss.com/store.js/1.3.20/store.min.js"&gt;&lt;/script&gt; 判断浏览器是否支持本地存储 12345678910&lt;script type="text/javascript"&gt; init(); function init()&#123; if(!store.enabled)&#123; alert("你的浏览器不支持本地存储，请使用更高版本的浏览器"); return; &#125;else&#123; ...... &#125; &lt;/script&gt; 开始愉快地使用store.js吧~store.js的基本API有： 123456store.set(key, val) //存储 key 的值为 val；store.get(key) //获取 key 的值；store.remove(key) //移除 key 的记录；store.clear() //清空存储；store.getAll() //返回所有存储；store.forEach() //遍历所有存储。 使用方法：123456789101112131415161718store.set('username', 'marcus') store.get('username') store.remove('username') store.clear() store.set('user', &#123; name: 'marcus', likes: 'javascript' &#125;) var user = store.get('user') alert(user.name + ' likes ' + user.likes) // Get all stored values store.getAll().user.name == 'marcus' // Loop over all stored values store.forEach(function(key, val) &#123; console.log(key, '==', val) &#125;) set 单个存储字符格式：store.set(key, data[, overwrite]);123456789101112store.set('name','mavis'); //存储name的值为 mavisstore.set('name','angel'); //将name的值存储为angel``` 在控制台显示 ![](https://sfault-image.b0.upaiyun.com/282/193/2821938934-5831460c5a712) ---- get 获取存入的key值 格式：`store.get(key[, alt]);` ```javascriptstore.set('name','mavis');store.set('name','angel');store.get('name'); //angel remove 移除key的记录1store.remove('name'); 在控制台可以看到name的值已经被移除 store.clear(); 清空所有本地存储 getAll 从所有存储中获取值格式：store.getAll() 12store.set('name','mavis');store.getAll().user.name == 'mavis'; //true forEach 遍历所有的值 12345store.set('user',&#123;name:'mavis',likes:'javascript'&#125;); // 存储对象 - 自动调用 JSON.stringifyvar user = store.get('user'); // 获取存储的对象 - 自动执行 JSON.parsestore.forEach(function(key, val) &#123; console.log(key, '==', val) &#125;) // 遍历所有存储 在浏览器中查看LocalStorage的方法F12打开开发人员工具→Application→Storage→LocalStorage]]></content>
      <categories>
        <category>jq</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>js</tag>
        <tag>插件</tag>
        <tag>jq</tag>
      </tags>
  </entry>
</search>
