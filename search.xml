<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[sublime中如何使用terminal教程]]></title>
    <url>%2F2018%2F02%2F08%2Fsublime%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8terminal%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[1.安装terminal首先在sublime text3 中安装terminalctrl+shift+P打开package control面板,输入pci进入安装插件列表，输入terminal找到插件安装 2.配置terminalterminal默认调用系统自带的PowerShell，接下来我们改成cmd.exe 安装完成后在工具菜单选择“Preferences(首选项)”–“Package Settings”–“Terminal”–“Settings - User” 在里面输入打开cmd命令窗口的脚本，然后ctr+s保存。12345&#123; &quot;terminal&quot;: &quot;c:\\WINDOWS\\system32\\cmd.exe&quot;, &quot;parameters&quot;: [&quot;/START&quot;,&quot;%CWD%&quot;] &#125; 3.启动terminal现在我们打开sublime，使用ctrl+shift+t就可以打开cmd命令窗口了 4.更多关于terminal详情关于sublime的terminal插件的更多安装及配置方法:百度经验Github]]></content>
      <categories>
        <category>sublime</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[漂亮的弹窗插件 —— SweetAlert教程]]></title>
    <url>%2F2018%2F02%2F08%2Fsweetalert%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[SweetAlert可以替代JavaScript原生的alert和confirm等函数呈现的弹出提示框，它将提示框进行了美化，并且允许自定义，支持设置提示框标题、提示类型、内容展示图片、确认取消按钮文本、点击后回调函数等。官方网站: https://sweetalert.js.org/Github: https://github.com/t4t5/sweetalert中文教程站: http://mishengqiang.com/sweetalert/ 使用方法1.引入(我用的CDN引入)12&lt;link href="https://cdn.bootcss.com/sweetalert/1.1.3/sweetalert.min.css" rel="stylesheet"&gt;&lt;script src="https://cdn.bootcss.com/sweetalert/1.1.3/sweetalert.min.js"&gt;&lt;/script&gt; 2.使用简称函数swal调用sweetAlert123456789101112swal(&#123; title: "确定删除吗？", text: "你将无法恢复该虚拟文件！", type: "warning", showCancelButton: true, confirmButtonColor: "#DD6B55", confirmButtonText: "确定删除！", closeOnConfirm: false&#125;,function()&#123; swal("删除！", "你的虚拟文件已经被删除。", "success"); &#125;); 3.举个栗子 html代码 1234567891011121314151617181.基本信息：&lt;button id="demo1"&gt;试一试&lt;/button&gt; &lt;br /&gt;2.带有文字的标题：&lt;button id="demo2"&gt;试一试&lt;/button&gt; &lt;br /&gt;3.成功提示：&lt;button id="demo3"&gt;试一试&lt;/button&gt; &lt;br /&gt;4.带有“确认”按钮的功能的警告消息：&lt;button id="demo4"&gt;试一试&lt;/button&gt; &lt;br /&gt;5.通过传递参数，您可以执行一些其他的事情比如“取消”。：&lt;button id="demo5"&gt;试一试&lt;/button&gt; &lt;br /&gt;6.一个有自定义图标的消息：&lt;button id="demo6"&gt;试一试&lt;/button&gt; &lt;br /&gt;7.自定义HTML信息：&lt;button id="demo7"&gt;试一试&lt;/button&gt; &lt;br /&gt;2秒后关闭：&lt;button id="demo8"&gt;试一试&lt;/button&gt; &lt;br /&gt;8.更换“提示”功能: &lt;button id="demo9"&gt;试一试&lt;/button&gt; &lt;br /&gt;9.使用加载程序（例如，用于AJAX请求）: &lt;button id="demo10"&gt;试一试&lt;/button&gt; &lt;br /&gt; js代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107document.getElementById("demo1").onclick = function() &#123; swal("这是一个信息提示框!")&#125;;document.getElementById("demo2").onclick = function() &#123; swal("这是一个信息提示框!", "很漂亮，不是吗？")&#125;;document.getElementById("demo3").onclick = function() &#123; swal("干得好", "你点击了按钮!", "success")&#125;;document.getElementById("demo4").onclick = function() &#123; swal(&#123; title: "你确定？", text: "您将无法恢复这个虚构的文件！", type: "warning", showCancelButton: true, confirmButtonColor: "#DD6B55", confirmButtonText: "是的，删除！", closeOnConfirm: false &#125;, function() &#123; swal("删除!", "您的虚构文件已被删除！", "success") &#125;)&#125;;document.getElementById("demo5").onclick = function() &#123; swal(&#123; title: "你确定？", text: "您将无法恢复这个虚构的文件！", type: "warning", showCancelButton: true, confirmButtonColor: "#DD6B55", confirmButtonText: "是的，删除！", cancelButtonText: "不，取消", closeOnConfirm: false, closeOnCancel: false &#125;, function(isConfirm) &#123; if (isConfirm) &#123; swal("删除!", "您的虚构文件已被删除！", "success") &#125; else&#123; swal("取消!", "您的虚构文件是安全的！", "error") &#125; &#125;)&#125;;document.getElementById("demo6").onclick = function() &#123; swal(&#123; title: "Sweet!", text: "这里是自定义图像!", imageUrl: "img/thumbs-up.jpg" &#125;)&#125;;document.getElementById("demo7").onclick = function() &#123; swal(&#123; title: "HTML &lt;small&gt;标题&lt;/small&gt;!", text: "A custom &lt;span style='color:pink'&gt;html&lt;span&gt; message.", html: true &#125;)&#125;;document.getElementById("demo8").onclick = function() &#123; swal(&#123; title: "自动关闭警报!", text: "2秒后自动关闭", timer: 2000, showConfirmButton: false &#125;)&#125;;document.getElementById("demo9").onclick = function() &#123; swal(&#123; title: "请输入！", text: "填写一些信息", type: "input", showCancelButton: true, closeOnConfirm: false, animation: "slide-from-top", inputPlaceholder: "请输入..." &#125;, function(inputValue) &#123; if (inputValue === false) &#123; return false; &#125; if (inputValue === "") &#123; swal.showInputError("内容不能为空！"); return false; &#125; swal("Nice!", "你输入的是：" + inputValue, "success") &#125;)&#125;;document.getElementById("demo10").onclick = function() &#123; swal(&#123; title: "AJAX请求实例", text: "提交运行Ajax请求", type: "info", showCancelButton: true, closeOnConfirm: false, showLoaderOnConfirm: true &#125;, function() &#123; setTimeout(function() &#123; swal("AJAX请求完成！"); &#125;, 2000) &#125;)&#125;; 效果预览 更多详情可以去中文教程站查看更多详情,里面包括了各种配置和方法，以及示例中文教程站: http://mishengqiang.com/sweetalert/]]></content>
      <categories>
        <category>jq</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>js</tag>
        <tag>插件</tag>
        <tag>jq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo的next主题个性化教程:打造炫酷网站]]></title>
    <url>%2F2018%2F02%2F08%2Fhexonext%2F</url>
    <content type="text"><![CDATA[看到有些next主题的网站很炫酷，那么是怎么配置的呢？接下来我会讲一讲如何实现一些炫酷的效果 主要有以下32种： 在右上角或者左上角实现fork me on github添加RSS添加动态背景实现点击出现桃心效果修改文章内链接文本样式修改文章底部的那个带#号的标签在每篇文章末尾统一添加“本文结束”标记修改作者头像并旋转博文压缩修改代码块自定义样式侧边栏社交小图标设置主页文章添加阴影效果在网站底部加上访问量添加热度网站底部字数统计添加 README.md 文件设置网站的图标Favicon实现统计功能添加顶部加载条在文章底部增加版权信息添加网易云跟帖(跟帖关闭，已失效，改为来必力)隐藏网页底部powered By Hexo / 强力驱动修改网页底部的桃心文章加密访问添加jiathis分享博文置顶修改字体大小修改打赏字体不闪动自定义鼠标样式为博客加上萌萌的宠物DaoVoice 在线联系点击爆炸效果 详细配置请参考: https://www.jianshu.com/p/f054333ac9e6]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[日期时间控件jQuery datetimepicker的使用简介]]></title>
    <url>%2F2018%2F02%2F08%2Fjquerydatetimepicker%2F</url>
    <content type="text"><![CDATA[datetimepicker是一个配置灵活的日期选择插件，你可以定义它的展示方式，包括日期格式、语言、限制选择日期范围、添加相关按钮以及其它导航等 此项目的Github地址：https://github.com/xdan/datetimepicker演示地址: https://xdsoft.net/jqplugins/datetimepicker/ 使用方法1.添加引用添加jquery.js、datetimepicker.js和datetimepicker.css到您的页面123&lt;link href="https://cdn.bootcss.com/jquery-datetimepicker/2.5.17/jquery.datetimepicker.min.css" rel="stylesheet"&gt;&lt;script src="https://cdn.bootcss.com/jquery/2.2.4/jquery.min.js"&gt;&lt;/script&gt;&lt;script src="https://cdn.bootcss.com/jquery-datetimepicker/2.5.17/jquery.datetimepicker.full.min.js"&gt;&lt;/script&gt; 2.创建input元素1&lt;input id="datetimepicker" type="text" &gt; 3.设置成中文1$.datetimepicker.setLocale('zh'); 4.启用插件1$('#datetimepicker').datetimepicker(); 按以上步骤我们就实现jquery datetimepicker的使用，当然这只是最基本的样式，另外jquery datetimepicker的样式控制是通过传一个json对象的参数给datetimepicker来实现的。下面我们举个例子来看下：1$("#start").datetimepicker(&#123; format: 'Y/m/d', timepicker: false &#125;); 上面传入的参数设置只显示年月日，以及弹出层只能选择日期，而不能选择时间。 那我们接下来总结一下它常用的一些参数及其作用。 详细配置参数关于详细配置参数参考：https://xdsoft.net/jqplugins/datetimepicker/12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455$('#datetimepicker').datetimepicker(&#123; value: '' // 设置当前datetimepicker的值 rtl: false, // false 默认显示方式 true timepicker和datepicker位置变换 format: 'Y/m/d H:i', // 设置时间年月日时分的格式 如: 2016/11/15 18:00 formatTime: 'H:i', // 设置时间时分的格式 formatDate: 'Y/m/d', // 设置时间年月日的格式 startDate: false, // new Date(), '1986/12/08', '-1970/01/05','-1970/01/05', step: 10, // 设置时间时分的间隔 closeOnDateSelect: false, // true 设置datepicker可点击 false 设置datepicker不可点击 实际上可以双击 closeOnTimeSelect: true, // true 设置timepicker可点击 false 设置timepicker不可点击 closeOnWithoutClick: true, // true 设置点击input可以隐藏datetimepicker false 设置点击input不可以隐藏datetimepicker closeOnInputClick: true, // true 设置点击input可以隐藏datetimepicker false 设置点击input不可以隐藏datetimepicker (会有闪动 先隐藏 再显示) timepicker: true, // true 显示timepicker false 隐藏timepicker datepicker: true, // true 显示datepicker false 隐藏datepicker weeks: false, // true 显示周数 false 隐藏周数 defaultTime: false, // 如果输入值为空 可用来设置默认显示时间 use formatTime format (ex. '10:00' for formatTime: 'H:i') defaultDate: false, // 如果输入值为空 可用来设置默认显示日期 use formatDate format (ex new Date() or '1986/12/08' or '-1970/01/05' or '-1970/01/05') minDate: false, // 设置datepicker最小的限制日期 如：2016/08/15 maxDate: false, // 设置datepicker最大的限制日期 如：2016/11/15 minTime: false, // 设置timepicker最小的限制时间 如：08:00 maxTime: false, // 设置timepicker最大的限制时间 如：18:00 allowTimes: [], // 设置timepicker显示的时间 如：allowTimes:['09:00','11:00','12:00','21:00'] opened: false, // false默认打开datetimepicker可关闭 true打开datetimepicker后不可关闭 initTime: true, // 设置timepicker默认时间 如：08:00 inline: false, // ture设置datetimepicker一直显示 theme: '', // ture设置datetimepicker显示样式 如: 'dark' withoutCopyright: true, // ture默认隐藏左下角'xdsoft.net'链接 false 显示左下角'xdsoft.net'链接 inverseButton: false, // false 默认 true datepicker的上一月和下一月功能互换 timepicker的上下可点击按钮功能互换 hours12: false, // true设置12小时格式 false设置24小时格式 next: 'xdsoft_next', // 设置datepicker上一月按钮的样式 prev : 'xdsoft_prev', // 设置datepicker下一月按钮的样式 dayOfWeekStart: 0, // 设置默认第-列为周几 如：0 周日 1 周一 parentID: 'body', // 设置父级选择器 timeHeightInTimePicker: 25, // 设置timepicker的行高 timepickerScrollbar: true, // ture设置timepicker显示滑动条 false设置timepicker不显示滑动条 todayButton: true, // ture显示今天按钮 false不显示今天按钮 位置在datepicker左上角 prevButton: true, // ture显示上一月按钮 false不显示上一月按钮 位置在datepicker左上角 nextButton: true, // ture显示下一月按钮 false不显示下一月按钮 位置在datepicker又上角 scrollMonth: true, // ture 设置datepicker的月份可以滑动 false设置datepicker的月份不可以滑动 lazyInit: false, // 翻译： 初始化插件发生只有当用户交互。大大加速插件与大量的领域的工作 mask: false, // 使用输入掩码。真正的-自动生成一个字段的“格式”的面具，从0到9的数字，设置为值的最高可能的数字。例如：第一个小时的数字不能大于2，而第一位数字不能大于5 如：&#123;mask:'9999/19/39 29:59',format:'Y/m/d H:i'&#125; validateOnBlur: true, // 失去焦点时验证datetime值输入,。如果值是无效的datetime,然后插入当前日期时间值 yearStart: 1950, // 设置最小的年份 yearEnd: 2050, // 设置最大的年份 monthStart: 0, // 设置最小的月份 monthEnd: 11, // 设置最大的月份 roundTime: 'round', // 设置timepicker的计算方式 round四舍五入 ceil向上取整 floor向下取整 allowDateRe : null, // 设置正则表达式检查日期 如：&#123;format:'Y-m-d',allowDateRe:'\d&#123;4&#125;-(03-31|06-30|09-30|12-31)' &#125; disabledDates : [], // 设置不可点击的日期 如：disabledDates: ['21.11.2016','22.11.2016','23.11.2016','24.11.2016','25.11.2016','26.11.2016'] disabledWeekDays: [], // 设置不可点击的星期 如：disabledWeekDays:[0,3,4] yearOffset: 0, // 设置偏移年份 如：2 代表当前年份加2 -2 代表当前年份减2 beforeShowDay: null, // 显示datetimepicker之前可调用的方法 &#123;beforeShowDay:function(d) &#123;console.log("bsd"); &#125; &#125; enterLikeTab: true, // tab按键均可使datetimepicker关闭 true点击回车键可使datetimepicker关闭 false点击回车键不可使datetimepicker关闭 showApplyButton: false // 相当于确定按钮 true显示 false隐藏&#125;); jquery datetimepicker的相关点击方法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081/* * 监听时间插件显示时的事件 */$('#datetimepicker').datetimepicker(&#123; onShow: function(dateText, inst) &#123; console.log("---已打开datetimepicker----"); &#125;&#125;); /* * 监听时间插件关闭时的事件 */$('#datetimepicker').datetimepicker(&#123; onClose: function(dateText, inst) &#123; console.log("---已关闭datetimepicker----"); &#125;&#125;); /* * 监听点击日期时的事件 */ $('#datetimepicker').datetimepicker(&#123; onSelectDate: function(dateText, inst) &#123; console.log(dateText); &#125;&#125;); /* * 监听点击时分的事件 */ $('#datetimepicker').datetimepicker(&#123; onSelectTime: function(dateText, inst) &#123; console.log(dateText); &#125;&#125;); /* * 监听点击datepicker 上一月下一月按钮及选择月份点击事件 */$('#datetimepicker').datetimepicker(&#123; onChangeMonth: function(dateText, inst) &#123; console.log(dateText); &#125;&#125;);/* * 监听获取当前datetimepicker显示的所有日期信息 */$('#datetimepicker').datetimepicker(&#123; onGetWeekOfYear: function(dateText, inst) &#123; console.log(dateText); &#125;&#125;); /* * 监听选择年份的点击事件 */$('#datetimepicker').datetimepicker(&#123; onChangeYear: function(dateText, inst) &#123; console.log(dateText); &#125;&#125;); /* * 实时监听你选择的日期和时间 */$('#datetimepicker').datetimepicker(&#123; onChangeDateTime: function(dateText, inst) &#123; console.log(dateText); &#125;&#125;); /* * 实时监听datetimepicker上的所有事件 */$('#datetimepicker').datetimepicker(&#123; onGenerate: function(dateText, inst) &#123; console.log(dateText); &#125;&#125;);]]></content>
      <categories>
        <category>jq</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>js</tag>
        <tag>插件</tag>
        <tag>jq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[store.js的使用 -- 本地存储localStorage的封装插件]]></title>
    <url>%2F2018%2F02%2F08%2Fstore%2F</url>
    <content type="text"><![CDATA[本地存储localstoragelocalstorage 是 HTML5 提供的在客户端存储数据的新方法，主要作用是将数据保存在客户端中，并且数据是永久保存的，除非人为干预删除。localstorage 的局限1、只有版本较高的浏览器中才支持 localstorage2、localStorage的值的类型限定为string类型，使用 JSON 时需转换3、如果存储内容过多会消耗内存空间，导致页面变卡，因为localStorage本质上是对字符串的读取 store.jsGithub地址 store.js 是一个兼容所有浏览器的 LocalStorage 包装器，不需要借助 Cookie 或者 Flash来实现。它提供非常了简洁的 API 来实现跨浏览器的本地存储功能。使用store,js简化了使用localStorage原生方法的操作。 store.js的使用 首先引入store.min.js插件: 1&lt;script src="https://cdn.bootcss.com/store.js/1.3.20/store.min.js"&gt;&lt;/script&gt; 判断浏览器是否支持本地存储 12345678910&lt;script type="text/javascript"&gt; init(); function init()&#123; if(!store.enabled)&#123; alert("你的浏览器不支持本地存储，请使用更高版本的浏览器"); return; &#125;else&#123; ...... &#125; &lt;/script&gt; 开始愉快地使用store.js吧~store.js的基本API有： 123456store.set(key, val) //存储 key 的值为 val；store.get(key) //获取 key 的值；store.remove(key) //移除 key 的记录；store.clear() //清空存储；store.getAll() //返回所有存储；store.forEach() //遍历所有存储。 使用方法：123456789101112131415161718store.set('username', 'marcus') store.get('username') store.remove('username') store.clear() store.set('user', &#123; name: 'marcus', likes: 'javascript' &#125;) var user = store.get('user') alert(user.name + ' likes ' + user.likes) // Get all stored values store.getAll().user.name == 'marcus' // Loop over all stored values store.forEach(function(key, val) &#123; console.log(key, '==', val) &#125;) set 单个存储字符格式：store.set(key, data[, overwrite]);123456789101112store.set('name','mavis'); //存储name的值为 mavisstore.set('name','angel'); //将name的值存储为angel``` 在控制台显示 ![](https://sfault-image.b0.upaiyun.com/282/193/2821938934-5831460c5a712) ---- get 获取存入的key值 格式：`store.get(key[, alt]);` ```javascriptstore.set('name','mavis');store.set('name','angel');store.get('name'); //angel remove 移除key的记录1store.remove('name'); 在控制台可以看到name的值已经被移除 store.clear(); 清空所有本地存储 getAll 从所有存储中获取值格式：store.getAll() 12store.set('name','mavis');store.getAll().user.name == 'mavis'; //true forEach 遍历所有的值 12345store.set('user',&#123;name:'mavis',likes:'javascript'&#125;); // 存储对象 - 自动调用 JSON.stringifyvar user = store.get('user'); // 获取存储的对象 - 自动执行 JSON.parsestore.forEach(function(key, val) &#123; console.log(key, '==', val) &#125;) // 遍历所有存储 在浏览器中查看LocalStorage的方法F12打开开发人员工具→Application→Storage→LocalStorage]]></content>
      <categories>
        <category>jq</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>js</tag>
        <tag>插件</tag>
        <tag>jq</tag>
      </tags>
  </entry>
</search>
